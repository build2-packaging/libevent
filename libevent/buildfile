using autoconf

import openssl_libs = libssl%lib{ssl}
sys_libs = # System libraries

switch $c.target.class
{
  case 'windows'
  {
    sys_libs += iphlpapi.lib ws2_32.lib shell32.lib advapi32.lib
  }
}

# Configuration
## Extract values from the upstream CMakeLists.txt & VersionViaGit.cmake files.

# https://github.com/libevent/libevent/blob/5df3037d10556bfcb675bc73e516978b75fc7bc7/cmake/VersionViaGit.cmake#L24-L27
event_version_vars = \
  EVENT_GIT___VERSION_MAJOR \
  EVENT_GIT___VERSION_MINOR \
  EVENT_GIT___VERSION_PATCH \
  EVENT_GIT___VERSION_STAGE

# https://regex101.com/r/adJCzJ/1
re_version_vars = '.+set\((PLACEHOLDER)\s+(([0-9]+|\"[a-z]+\")?)\)'
for var : $event_version_vars
{
  re_var = $regex.replace($re_version_vars, "PLACEHOLDER", $var)
  lines = $process.run_regex(cat $src_base/VersionViaGit.cmake, "$re_var")
  val = $regex.merge($lines, $re_var, '\2', '', format_first_only format_no_copy)
  # bring it in to scope (will expand to actual variable name)
  $var = $val
}

# https://regex101.com/r/A4AUM3/1
re_config_vars = '^set\((PLACEHOLDER)\s+(.+)\)'
event_config_vars = \
  EVENT_NUMERIC_VERSION \
  EVENT_ABI_LIBVERSION_CURRENT \
  EVENT_ABI_LIBVERSION_REVISION \
  EVENT_ABI_LIBVERSION_AGE \
  EVENT_PACKAGE_RELEASE
for var : $event_config_vars
{
  re_var = $regex.replace($re_config_vars, "PLACEHOLDER", $var)
  lines = $process.run_regex(cat $src_base/CMakeLists.txt, "$re_var")
  val = $regex.merge($lines, $re_var, '\2', '', format_first_only format_no_copy)
  # bring it in to scope (will expand to actual variable name)
  $var = $val
}

# https://github.com/libevent/libevent/blob/5df3037d10556bfcb675bc73e516978b75fc7bc7/CMakeLists.txt#L68-L94
EVENT_VERSION_MAJOR = $EVENT_GIT___VERSION_MAJOR
EVENT_VERSION_MINOR = $EVENT_GIT___VERSION_MINOR
EVENT_VERSION_PATCH = $EVENT_GIT___VERSION_PATCH
EVENT_VERSION_STAGE = $EVENT_GIT___VERSION_STAGE
EVENT_VERSION = $EVENT_VERSION_MAJOR.$EVENT_VERSION_MINOR.$EVENT_VERSION_PATCH-$EVENT_STAGE_NAME

EVENT_ABI_MAJOR = $EVENT_VERSION_MAJOR
EVENT_ABI_MINOR = $EVENT_VERSION_MINOR
EVENT_ABI_PATCH = $EVENT_VERSION_PATCH

EVENT_ABI_LIBVERSION = "$EVENT_ABI_MAJOR.$EVENT_ABI_MINOR.$EVENT_ABI_PATCH"
EVENT_PACKAGE_VERSION = "$EVENT_VERSION_MAJOR.$EVENT_VERSION_MINOR.$EVENT_VERSION_PATCH"

# Output to an 'event2' folder, since includes expect this.
$out_base/event2/h{event-config}: in{event-config.h.cmake}
{
  autoconf.prefix="EVENT__"
  EVENT__DISABLE_DEBUG_MODE = 1
  EVENT__DISABLE_MM_REPLACEMENT = 1
  EVENT__HAVE_LIBZ = 0
  EVENT__HAVE_OPENSSL = 1
  EVENT__DISABLE_THREAD_SUPPORT = 1
}

# TODO (need fix for '_VAR' names being reserved):
# h{evconfig-private.h}: in{evconfig-private.h.cmake}

# event core
lib{event_core}: include/h{**} h{event2/event-config} {c}{* src_core/*}
{
  c.libs += $sys_libs
}
lib{event_core}: c{src_core/win/*}: include = ($c.target.class == 'windows')

#event extra
lib{event_extra}: include/h{**} h{event2/event-config} {c}{src_extra/*} lib{event_core}
{
  c.libs += $sys_libs
}

#event openssl
lib{event_openssl}: include/h{**} h{event2/event-config} {c}{src_openssl/*} lib{event_core} $openssl_libs

# event threads
lib{event_pthreads}: include/h{**} h{event2/event-config} {c}{src_pthreads/*} lib{event_core}:
{
  include = ($c.class != 'msvc')
}

./: lib{event}: lib{event_openssl} lib{event_extra} lib{event_core}
./: lib{event}: lib{event_pthreads}: include = ($c.class != 'msvc')

h{export}@./: c.importable = false

# Build options.
#
c.poptions =+ "-I$out_base" "-I$src_base" "-I$src_base/include" "-I$src_base/include_internal"

obj{src_core/**}:
{
  c.poptions += -Devent_core_shared_EXPORTS
}
obj{src_extra/**}:
{
  c.poptions += -Devent_extra_shared_EXPORTS
}
obj{src_openssl/**}:
{
  c.poptions += -Devent_openssl_shared_EXPORTS
}
# TODO: Look over this syntax. How does one conditionally exclude a "variable/config assignment prerequisite"?
obj{src_pthreads/**}: c.poptions += -Devent_pthreads_shared_EXPORTS: include = ($c.class != 'msvc')

# Export options.
#
lib{event}:
{
  c.export.poptions = "-I$out_base" "-I$src_base/include"
  c.export.libs = lib{event_openssl} lib{event_extra} lib{event_core} $sys_libs
}
# TODO: Conditionally export event_pthreads (a ports exist but unsure if we want to use that)
# lib{event}: c.export.libs += lib{event_pthreads}: include = ($c.class != 'msvc')

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{event}: bin.lib.version = "-$version.project_id"
else
  lib{event}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libevent/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
h{include/*}:
{
  install         = include/libevent/
  install.subdirs = true
}
h{event2/event-config}:
{
  install         = include/libevent/event2
  install.subdirs = true
}